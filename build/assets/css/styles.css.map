{"version":3,"sources":["styles.scss","_devUtils.scss","_mixins.scss","_social-icons.scss","_variables.scss","styles.css"],"names":[],"mappings":"AAAA;qDACqD;ACkBrD,aAjBE,uCAAsB,EAmBvB;;ACqHD;;;;;;;;;;;;;;;;;;;;EAoBE;AC9JF,aACE,6BAA6B,CAC7B,wFAAQ,CACR,2hBAI4G,CAC5G,oBAAoB,CACpB,mBAAmB,EAAA;;AAErB,iGAAiG;AACjG,4FAA4F;AAC5F,gOAOE;AACF,4BACE,mBAAmB,CACnB,oBAAoB,CACpB,qBAAqB,CACrB,qBAAqB,CACrB,sBAAsB,CACtB,YAAY,CACZ,8CAA8C,CAC9C,oCAAoC,CACpC,mCAAmC,EACpC;;AAWD,oBACE,sBAAsB,CACtB,YAAY,CACZ,WAAW,CACX,mBAAmB,EAWpB;;AAVC,6BALF,oBAMI,eAAe,CACf,mBAAmB,CACnB,OAAO,CACP,SAAS,CACT,YAAY,CACZ,mBAAmB,CACnB,kBAAkB,CAClB,kBAAkB,EAErB,EAAA;;AACD,UACE,yBAAyB,EAsC1B;;AAvCD,YAGI,yCArBmC,CAsBnC,gBAAgB,CAChB,kBAAkB,CAClB,eCtDmB,CDwDnB,sBAAsB,CACtB,cAAc,CACd,sBAAsB,EACvB;;AAXH,wBAaI,kBAAqB,CACrB,uBAAuB,EACxB;;AAfH,wBAiBI,eAAe,EAChB;;AAlBH,uBAoBI,gBAAgB,EACjB;;AArBH,qBAuBI,mBAAmB,CACnB,cAAc,CACd,gCAAyB,CACzB,6BAAsB,CACtB,2BAAoB,CACpB,4BAAqB,CACrB,wBAAiB,EASlB;;AAtCH,2BA+BM,WAAW,CACX,gCAAyB,CACzB,6BAAsB,CACtB,2BAAoB,CACpB,4BAAqB,CACrB,wBAAiB,EAClB;;AE7CL,slFAAslF","file":"styles.css","sourcesContent":["/* Import partials from sass directory\n-------------------------------------------------- */\n@import\n  \"variables\", // define most common variables used\n  \"devUtils\",\n  \"mixins\", // self-curated and self-written mixins\n  \"social-icons\", // custom social icons using entypo icon fonts\n  \"custom\"\n;","// Development aides.\n@mixin spotlight() {\n  background-color: rgba(200,0,0,.2);\n}\n@mixin devBorder($value: pink) {\n  border: 1px dashed $value;\n}\n\n// Use like this:\n// .selector {\n//   @include devBorder();\n//   & > * {\n//     @include devBorder(green);\n//     & > * {\n//       @include spotlight();\n//     }\n//   }\n// }\n\n.spotlight {\n  @include spotlight();\n}","// ----\n// Sass (v3.4.7)\n// Compass (v1.0.1)\n// ----\n\n/// Convert angle\n/// @author Chris Eppstein\n/// @param {Number} $value - Value to convert\n/// @param {String} $unit - Unit to convert to\n/// @return {Number} Converted angle\n@function convert-angle($value, $unit) {\n  $convertable-units: deg grad turn rad;\n  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);\n  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {\n    @return $value\n             / nth($conversion-factors, index($convertable-units, unit($value)))\n             * nth($conversion-factors, index($convertable-units, $unit));\n  }\n\n  @warn \"Cannot convert `#{unit($value)}` to `#{$unit}`.\";\n}\n\n/// Test if `$value` is an angle\n/// @param {*} $value - Value to test\n/// @return {Bool}\n@function is-direction($value) {\n  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);\n  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));\n\n  @return $is-direction or $is-angle;\n}\n\n/// Convert a direction to legacy syntax\n/// @param {Keyword | Angle} $value - Value to convert\n/// @require {function} is-direction\n/// @require {function} convert-angle\n@function legacy-direction($value) {\n  @if is-direction($value) == false {\n    @warn \"Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction\";\n  }\n\n  $conversion-map: (\n    to top          : bottom,\n    to top right    : bottom left,\n    to right top    : left bottom,\n    to right        : left,\n    to bottom right : top left,\n    to right bottom : left top,\n    to bottom       : top,\n    to bottom left  : top right,\n    to left bottom  : right top,\n    to left         : right,\n    to left top     : right bottom,\n    to top left     : bottom right\n  );\n\n  @if map-has-key($conversion-map, $value) {\n    @return map-get($conversion-map, $value);\n  }\n\n  @return 90deg - convert-angle($value, 'deg');\n}\n\n/// Mixin printing a linear-gradient\n/// as well as a plain color fallback\n/// and the `-webkit-` prefixed declaration\n/// @access public\n/// @param {String | List | Angle} $direction - Linear gradient direction\n/// @param {Arglist} $color-stops - List of color-stops composing the gradient\n@mixin linear-gradient($direction, $color-stops...) {\n  @if is-direction($direction) == false {\n    $color-stops: ($direction, $color-stops);\n    $direction: 180deg;\n  }\n\n  background: nth(nth($color-stops, 1), 1);\n  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);\n  background: linear-gradient($direction, $color-stops);\n}\n\n// Tests\n// .test-1 {\n//   @include linear-gradient(#31B7D7, #EDAC7D);\n// }\n//\n// .test-2 {\n//   @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);\n// }\n//\n// .test-3 {\n//   @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%);\n// }\n\n/// vendor prefixes for transforms\n// Browser Prefixes\n@mixin transform($transforms) {\n\t-webkit-transform: $transforms;\n\t-moz-transform: $transforms;\n\t-ms-transform: $transforms;\n\ttransform: $transforms;\n}\n\n// Rotate\n@mixin rotate ($deg) {\n\t@include transform(rotate(#{$deg}deg));\n}\n\n// Scale\n@mixin scale($scale) {\n\t@include transform(scale($scale));\n}\n\n// Translate\n@mixin translate ($x, $y) {\n\t@include transform(translate($x, $y));\n}\n\n// Skew\n@mixin skew ($x, $y) {\n\t@include transform(skew(#{$x}deg, #{$y}deg));\n}\n\n// Transform Origin\n@mixin transform-origin ($origin) {\n    \t-webkit-transform-origin: $origin;\n    \t-moz-transform-origin: $origin;\n\t-ms-transform-origin: $origin;\n\ttransform-origin: $origin;\n}\n\n/// vendor prefixes for transitions\n@mixin transition($transition-property, $transition-time, $method) {\n\t-webkit-transition: $transition-property $transition-time $method;\n\t-moz-transition: $transition-property $transition-time $method;\n\t-ms-transition: $transition-property $transition-time $method;\n\t-o-transition: $transition-property $transition-time $method;\n\ttransition: $transition-property $transition-time $method;\n}\n/* Usage - Stick into the top of your SCSS sheet and @include where needed for cross browser transitions.\n\n.class {\n     @include transition($transition-property, $transition-time, $method);\n}\n\n$transition-property = the property you want to transition\n$transition-time = seconds you want the transition to last\n$method = how you want it to transition - e.g. ease-in-out\n\nUsage example;\n\n-------------\n\n.item {\n    @include transition(padding, 1s, ease-in-out);\n}\n\n-------------\n\n*/\n/// vendor prefixes for Animations\n\n@mixin keyframes($animation-name) {\n    @-webkit-keyframes #{$animation-name} {\n        @content;\n    }\n    @-moz-keyframes #{$animation-name} {\n        @content;\n    }\n    @-ms-keyframes #{$animation-name} {\n        @content;\n    }\n    @-o-keyframes #{$animation-name} {\n        @content;\n    }\n    @keyframes #{$animation-name} {\n        @content;\n    }\n}\n\n@mixin animation($str) {\n  -webkit-animation: #{$str};\n  -moz-animation: #{$str};\n  -ms-animation: #{$str};\n  -o-animation: #{$str};\n  animation: #{$str};\n}\n\n// Box Shadow Mixins\n@mixin box-shadow-bottom($y:0px, $x:10px, $blur:10px, $spread:-10px, $color:rgba(153,153,153,1), $inset:false) {\n  @if $inset {\n    -webkit-box-shadow:inset $y $x $blur $spread $color;\n    -moz-box-shadow:inset $y $x $blur $spread $color;\n    box-shadow:inset $y $x $blur $spread $color;\n  } @else {\n    -webkit-box-shadow: $y $x $blur $spread $color;\n    -moz-box-shadow: $y $x $blur $spread $color;\n    box-shadow: $y $x $blur $spread $color;\n  }\n}\n@mixin box-shadow($y, $x, $blur, $spread, $color, $inset) {\n  @if $inset {\n    -webkit-box-shadow:inset $y $x $blur $spread $color;\n    -moz-box-shadow:inset $y $x $blur $spread $color;\n    box-shadow:inset $y $x $blur $spread $color;\n  } @else {\n    -webkit-box-shadow: $y $x $blur $spread $color;\n    -moz-box-shadow: $y $x $blur $spread $color;\n    box-shadow: $y $x $blur $spread $color;\n  }\n}\n\n// Spacing Mixins\n@mixin spaceVert($value:$space) {\n  @if $value {\n    margin-top: $value * 2;\n    &:first-child {\n      margin-top: 0;\n    }\n    @media (min-width: #{$break-mid}) {\n      margin-top: $value;\n    }\n  }\n  @else {\n    margin-top: $space2x;\n    &:first-child {\n      margin-top: 0;\n    }\n    @media (min-width: #{$break-mid}) {\n      margin-top: $space;\n    }\n  }\n}\n\n// Image Gallery Mixin - uses flexbox\n@mixin perRow($i, $value:$space, $center:false) {\n  $marg: null;\n  $margHalf: null;\n  @if $value {\n    $marg: $value;\n    $margHalf: $value / 2;\n  }\n  @else {\n    $marg: $space;\n    $margHalf: $space / 2;\n  }\n  @if $center == 'center' {\n    $center: 1;\n  }\n  margin-top: -$marg;\n  margin-left: -$margHalf;\n  margin-right: -$margHalf;\n  margin-bottom: 0;\n  & > * {\n    width: calc((100% - (#{$marg} * #{$i})) / #{$i});\n    margin: $marg $margHalf 0;\n    // center the contents of the last row when not full\n    @if $center {\n      // last row + 1st column\n      &:nth-last-child(-n+#{$i}):nth-child(#{$i}n+1) {\n        margin-left: auto;\n        margin-right: $margHalf;\n      }\n      // last row + last item\n      &:nth-last-child(-n+#{$i}):last-child {\n        margin-left: $margHalf;\n        margin-right: auto;\n      }\n      // last row + first column + last item\n      &:nth-last-child(-n+#{$i}):nth-child(#{$i}n+1):last-child {\n        margin-left: auto;\n        margin-right: auto;\n      }\n      // default settings for when last row is full\n      // last row + first column + nth from end\n      // last row + last column + last item\n      &:nth-last-child(-n+#{$i}):nth-child(#{$i}n+1):nth-last-child(#{$i}),\n      &:nth-last-child(-n+#{$i}):nth-child(#{$i}n+#{$i}):last-child {\n        margin: $marg $margHalf 0;\n      }\n    }\n  }\n}\n\n@mixin clear_perRow($i, $value:$space, $last:false) {\n  @if $value {\n    &:nth-child(-n+#{$i}) {\n      margin-top: $value;\n    }\n    &:nth-child(#{$i}n + 1) {\n      margin-left: $value;\n      @if $last {\n        &:last-child {\n          margin-left: $value;\n          margin-right: 0;\n        }\n      }\n    }\n  }\n  @else {\n    &:nth-child(#{$i}n + 1) {\n      margin-left: $space;\n      @if $last {\n        &:last-child {\n          margin-left: $space;\n          margin-right: 0;\n        }\n      }\n    }\n  }\n}","@font-face {\n  font-family: 'Entypo-subset';\n  src: url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.eot?14955217');\n  src: url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.eot?14955217#iefix') format('embedded-opentype'),\n       url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.woff2?14955217') format('woff2'),\n       url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.woff?14955217') format('woff'),\n       url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.ttf?14955217') format('truetype'),\n       url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.svg?14955217#entypo-subset') format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */\n/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */\n/*\n@media screen and (-webkit-min-device-pixel-ratio:0) {\n  @font-face {\n    font-family: 'entypo-subset';\n    src: url('http://localhost:7000/assets/fonts/entypo-subset/entypo-subset.svg?12057408#entypo-subset') format('svg');\n  }\n}\n*/\n.entypo-subset {\n  font-style: normal; // reset as safeguard\n  font-weight: normal; // reset as safeguard\n  font-variant: normal; // reset as safeguard\n  text-transform: none; // reset as safeguard\n  text-decoration: none; // reset as safeguard\n  speak: none;\n  /* Font smoothing. That was taken from TWBS */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n//// codes for included fonts - &#x'code';\n//.icon-left-open-big:before { content: '\\e800'; } /* '' */\n//.icon-right-open-big:before { content: '\\e801'; } /* '' */\n//.icon-twitter:before { content: '\\e802'; } /* '' */\n//.icon-facebook:before { content: '\\e804'; } /* '' */\n//.icon-instagram-1:before { content: '\\e805'; } /* '' */\n//.icon-mail:before { content: '\\e806'; } /* '' */\n\n$font-icon: 'Entypo-subset', sans-serif; // Icon Font\n\n.container-social {\n  display: inline-block;\n  width: auto;\n  padding: 0;\n  text-align: center;\n  @media (min-width: $break-large){\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: auto;\n    margin: 0 0 0 auto;\n    padding-top: 10px;\n    text-align: right;\n  }\n}\n.social {\n  vertical-align: text-top; // assuming spaced from object above\n  & a {\n    font-family: $font-icon;\n    font-size: 20px; // 20px matches facebook like button height\n    line-height: 20px;\n    color: $color-primary;\n    @extend .entypo-subset;\n    display: inline-block;\n    margin: 0 5px;\n    text-decoration: none;\n  }\n  & a.social-mail { // fix height discrepency and alignment issue\n    font-size: $font-size * 1.95;\n    vertical-align: bottom;\n  }\n  & a:first-child {\n    margin-left: 0;\n  }\n  & a:last-child {\n    margin-right: 0;\n  }\n  & #fboverlay {\n    padding-right: 5px;\n    opacity: 0.67;\n    -webkit-filter: grayscale(100%);\n    -moz-filter: grayscale(100%);\n    -o-filter: grayscale(100%);\n    -ms-filter: grayscale(100%);\n    filter: grayscale(100%);\n    &:hover {\n      opacity: 1;\n      -webkit-filter: grayscale(100%);\n      -moz-filter: grayscale(100%);\n      -o-filter: grayscale(100%);\n      -ms-filter: grayscale(100%);\n      filter: grayscale(100%);\n    }\n  }\n}","//variables\n\n$font-size: 16px; // Default size is 16px\n$line-height: $font-size * 1.25; // Default multiplier is 1.25\n$letter-spacing: 1px; // Default is 1px\n\n$font-primary: Verdana, Geneva, sans-serif; // Body\n$font-secondary: Verdana, Geneva, sans-serif; // Menus\n$font-icon: \"Entypo-subset\", sans-serif; // Icons\n\n$color-primary: #bbbbbb;\n$color-secondary: #666666;\n$color-terciary: #000000;\n\n$border-primary: 1px solid $color-primary;\n$border-secondary: 1px solid $color-secondary;\n$border-inputs: 1px solid #cccccc;\n\n$break-small: 520px;\n$break-mid: 768px;\n$break-large: 1024px;\n// $break-xlarge: 1146px; // 1090px content + 5% for margins\n$break-giant: 1500px;  // Excludes most laptops\n$break-max: 2000px;  // Ultra-large displays\n\n$spacing-base: 10px;  // Use an even number\n\n// to-do: Clean this up as map or move to mixin that uses it.\n$space: $spacing-base;\n$space-half: $space / 2;\n$space2x: $space * 2;\n$space3x: $space * 3;\n$space4x: $space * 4;\n"]}